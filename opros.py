from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,

    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
)
from states import GET_ERROR, GET_ADDRESS, GET_MONEY, GET_TABLE_EROR, TANKS, TOYS, BANKNOTE

import os
from dotenv import load_dotenv

load_dotenv()

async def banknote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['üî¥', 'üü¢']]
    markup = ReplyKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ö–∞–∫–æ–π —Å–µ–π—á–∞—Å —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –∫—É–ø—é—Ä–Ω–∏–∫–µ: –∫—Ä–∞—Å–Ω—ã–π –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–π?",
        reply_markup=markup,
    )

    return BANKNOTE

async def banknote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['color'] == update.effective_message.text
    if context.user_data['color'] == 'üî¥':

        return GET_ADDRESS
    
    else:
        pass

async def toys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∑–∞–Ω–æ–≤–æ", callback_data="back")]]
    markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    await query.answer()
    user_name = update.effective_user.name
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Ñ–æ—Ç–æ –∑–∞—Å—Ç—Ä—è–≤—à–µ–π –∏–≥—Ä—É—à–∫–∏, –∏ –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥.\n\n–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ! üòä",
        reply_markup=markup,
    )

    # await context.bot.send_message(
    #         chat_id=int(os.getenv('MY_ID')),
    #         text=f'{user_name} - —É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∏–≥—Ä—É—à–∫–∞ –∑–∞—Å—Ç—Ä—è–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–º–æ—á—å')

    return TOYS


async def get_table_eror(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["trable"] = update.effective_message.text
    print(context.user_data["trable"])
    query = update.callback_query
    if query:
        keyboard = [["01", "02", "03", "04", "–Ω–µ—Ç"]]
        markup = ReplyKeyboardMarkup(keyboard)
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=open("photo/table.jpg", "rb"),
            caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≥–∞—Ä–∏—Ç –Ω–∞ —Ç–∞–±–ª–æ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=markup,
        )
    else:
        keyboard = [["00", "01", "02", "03", "04"]]
        markup = ReplyKeyboardMarkup(keyboard)
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=open("photo/table.jpg", "rb"),
            caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≥–∞—Ä–∏—Ç –Ω–∞ —Ç–∞–±–ª–æ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            reply_markup=markup,
        )
    return GET_ERROR


async def no_in_sp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–Ω–µ—Å—Ç–∏ –µ—ë –≤ –±–æ—Ç–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return GET_TABLE_EROR


async def get_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_message.text != "–Ω–µ—Ç—É":
        context.user_data["table_eror"] = update.effective_message.text
        print(context.user_data["table_eror"])
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–ø–ø–∞—Ä–∞—Ç –æ—Ç —Ä–æ–∑–µ—Ç–∫–∏ –∏ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, ‚ùóÔ∏è–ü–û–õ–ù–û–°–¨–¢–Æ –û–¢–ö–õ–Æ–ß–ò–¢–ï –ü–ò–¢–ê–ù–ò–ï‚ùóÔ∏è –∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞.\n\n–≥–æ—Ä–æ–¥/—É–ª–∏—Ü–∞ –Ω–æ–º–µ—Ä.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return GET_ADDRESS


async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.effective_message.text
    print(context.user_data["address"])
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text="—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?"
    )
    return GET_MONEY


async def get_money(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["money"] = update.effective_message.text
    print(context.user_data["money"])
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚ùóÔ∏è–í –û–î–ù–û–ú –°–û–û–ë–©–ï–ù–ò–ò‚ùóÔ∏è\n\n1. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –±–∞–Ω–∫\n\n2. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
    )
    return TANKS


async def tanks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∑–∞–Ω–æ–≤–æ", callback_data="exit")]]
    markup = InlineKeyboardMarkup(keyboard)
    context.user_data["rek"] = update.effective_message.text
    print(context.user_data["rek"])
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏. –ú—ã —É—Å—Ç—Ä–∞–Ω–∏–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏ –≤–µ—Ä–Ω—ë–º –≤–∞–º —Å—Ä–µ–¥—Å—Ç–≤–∞.",
        reply_markup=markup,
    )
    sp = [
        "–∫–ª–µ—à–Ω—è –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
        "–∫–Ω–æ–ø–∫–∞ –∑–∞–ª–∏–ø–ª–∞",
        "–¥–∂–æ–π—Å—Ç–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
        "–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–æ–Ω–µ—Ç–æ–π –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
        "–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫—É–ø—é—Ä–æ–π –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
        "–∑–∞—Å—Ç—Ä—è–ª–∞ –∏–≥—Ä—É—à–∫–∞",
        "–∫–ª–µ—à–Ω—è –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
        "–Ω–µ—Ç –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ",
    ]
    # await context.bot.send_message(
    #     chat_id=int(os.getenv('MY_ID')),
    #     text=f"{context.user_data['trable']} - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É—á–∏–ª–∞—Å—å —Å –±–æ—Ç–æ–º\n\n{context.user_data['table_eror']} - –æ—à–∏–±–∫–∞ –Ω–∞ —Ç–∞–±–ª–æ\n\n{context.user_data['address']} - –∞–¥—Ä–µ—Å –∞–ø–ø–∞—Ä–∞—Ç–∞\n\n{context.user_data['money']} - —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ—Ç—Ä–∞—Ç–∏–ª\n\n{context.user_data['rek']} - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞",
    # )
    # if context.user_data["trable"] not in sp:
    #     await context.bot.send_message(
    #         chat_id=int(os.getenv('MY_ID')),
    #         text=f"–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ –±–æ—Ç–∞:\n\n{context.user_data['trable']}",
    #     )
